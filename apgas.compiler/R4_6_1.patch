diff --git a/org.eclipse.jdt.core/META-INF/MANIFEST.MF b/org.eclipse.jdt.core/META-INF/MANIFEST.MF
index 744ae13..9ef7333 100644
--- a/org.eclipse.jdt.core/META-INF/MANIFEST.MF
+++ b/org.eclipse.jdt.core/META-INF/MANIFEST.MF
@@ -3,7 +3,7 @@ Main-Class: org.eclipse.jdt.internal.compiler.batch.Main
 Bundle-ManifestVersion: 2
 Bundle-Name: %pluginName
 Bundle-SymbolicName: org.eclipse.jdt.core; singleton:=true
-Bundle-Version: 3.12.1.qualifier
+Bundle-Version: 3.13.1.qualifier
 Bundle-Activator: org.eclipse.jdt.core.JavaCore
 Bundle-Vendor: %providerName
 Bundle-Localization: plugin
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
index f7e4de5..5f69675 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
@@ -1878,4 +1878,13 @@ void setSourceStart(int sourceStart);
 	/** @deprecated - problem is no longer generated (implementation issue has been resolved)
 	 * @since 3.10 */
 	int LambdaShapeComputationError = 1101;
+	
+	/** @since 3.13 */
+	int SerializableLambdaCapturesThisWarning = 1102;
+	
+	/** @since 3.13 */
+	int SerializableLambdaCapturesThisError = 1103;
+	
+	/** @since 3.13 */
+	int SerializableLambdaCapturesVarError = 1104;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
index a8920eb..3b6339c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
@@ -439,6 +439,10 @@ public class LambdaExpression extends FunctionalExpression implements IPolyExpre
 		if (this.shouldCaptureInstance && this.scope.isConstructorCall) {
 			this.scope.problemReporter().fieldsOrThisBeforeConstructorInvocation(this);
 		}
+		if (this.isSerializable && this.shouldCaptureInstance) {
+			boolean error = !this.scope.enclosingReceiverType().isSubtypeOf(this.scope.getJavaIoSerializable());
+			this.scope.problemReporter().serializableLambdaCapturesThis(this, this.scope.enclosingReceiverType(), error);
+		}
 		return argumentsHaveErrors ? this.resolvedType = null : this.resolvedType;
 	}
 
@@ -1219,6 +1223,9 @@ public class LambdaExpression extends FunctionalExpression implements IPolyExpre
 				this.outerLocalVariablesSlotSize++;
 				break;
 		}		
+		if (this.isSerializable && !actualOuterLocalVariable.type.isPrimitiveType() && !actualOuterLocalVariable.type.isSubtypeOf(this.scope.getJavaIoSerializable())) {
+			this.scope.problemReporter().serializableLambdaCapturesVar(this, actualOuterLocalVariable);
+		}
 	}
 
 	public SyntheticArgumentBinding getSyntheticArgument(LocalVariableBinding actualOuterLocalVariable) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
index ce2b138..7f8b293 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
@@ -352,6 +352,9 @@ public static int getIrritant(int problemID) {
 		    return CompilerOptions.FinalParameterBound;
 
 		case IProblem.MissingSerialVersion:
+		case IProblem.SerializableLambdaCapturesThisError:
+		case IProblem.SerializableLambdaCapturesThisWarning:
+		case IProblem.SerializableLambdaCapturesVarError:
 			return CompilerOptions.MissingSerialVersion;
 
 		case IProblem.ForbiddenReference:
@@ -1418,6 +1421,24 @@ public void lambdaSignatureMismatched(LambdaExpression target) {
 		target.diagnosticsSourceEnd());
 }
 
+public void serializableLambdaCapturesThis(Expression expression, ReferenceBinding targetType, boolean error) {
+	this.handle(
+		error ? IProblem.SerializableLambdaCapturesThisError : IProblem.SerializableLambdaCapturesThisWarning,
+		new String[]{ new String(targetType.readableName())},
+		new String[]{ new String(targetType.shortReadableName())},
+		expression.sourceStart,
+		expression.sourceEnd);
+}
+
+public void serializableLambdaCapturesVar(Expression expression, LocalVariableBinding variable) {
+	this.handle(
+		IProblem.SerializableLambdaCapturesVarError,
+		new String[]{ new String(variable.readableName()), new String(variable.type.readableName())},
+		new String[]{ new String(variable.shortReadableName()), new String(variable.type.shortReadableName())},
+		expression.sourceStart,
+		expression.sourceEnd);
+}
+
 public void lambdaParameterTypeMismatched(Argument argument, TypeReference type, TypeBinding expectedParameterType) {
 	String name = new String(argument.name);
 	String expectedTypeFullName = new String(expectedParameterType.readableName());
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
index 84c5273..5707c3c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
@@ -863,6 +863,9 @@
 1059 = Cannot infer type argument(s) for <{0}> {1}
 
 1100 = Problem detected during type inference: {0}
+1102 = Serializable lambda captures this with type {0}
+1103 = Serializable lambda captures this with non-serializable type {0}
+1104 = Serializable lambda captures variable {0} with non-serializable type {1}
 
 ### ELABORATIONS
 ## Access restrictions
diff --git a/org.eclipse.jdt.core/pom.xml b/org.eclipse.jdt.core/pom.xml
index ff8fed3..767717d 100644
--- a/org.eclipse.jdt.core/pom.xml
+++ b/org.eclipse.jdt.core/pom.xml
@@ -18,7 +18,7 @@
   </parent>
   <groupId>org.eclipse.jdt</groupId>
   <artifactId>org.eclipse.jdt.core</artifactId>
-  <version>3.12.1-SNAPSHOT</version>
+  <version>3.13.1-SNAPSHOT</version>
   <packaging>eclipse-plugin</packaging>
 
   <properties>
